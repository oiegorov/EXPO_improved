<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
  <head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta name="description" content="description goes here" />
    <meta name="keywords" content="keywords,goes,here" />
    <meta name="author" content="Your Name" />
    <meta name="generator" content="webgen - http://webgen.rubyforge.org" />
    <link rel="stylesheet" type="text/css" href="default.css" />
    <!--[if IE 6]>
        <link rel="stylesheet" href="browserfix.css" type="text/css" />
        <![endif]-->
    <title>Expo homepage</title>
  </head>

  <body>
    <div id="sidebar">
      <h1>Expo</h1>
      <h2>EXPeriment cOnduct</h2>

      <div id="menu">
        <ul><li class="webgen-menu-level1 webgen-menu-item-selected"><span>Expo homepage</span></li><li class="webgen-menu-level1"><a href="samples.html">Code samples</a></li><li class="webgen-menu-level1"><a href="publications.html">Related Publications</a></li></ul>
      </div>

      <h3>Links:</h3>
      <ul>
        <li><a href="https://gforge.inria.fr/projects/expo/">Expo forge</a></li>
      </ul>
    </div>

    <div id="content">
      <h2 id='expo'>Expo</h2>

<p>Expo is an experiment engine for distributed platforms. It aims at simplifying the experimental process on such platforms. In order to meet this goal several approach are used in expo.</p>

<h2 id='domain_specific_language'>Domain Specific Language</h2>

<p>Expo proposes a DSL (Domain Specific Language) derived from Ruby and adapted to the management of experiment. It is based on several abstractions like tasks, tasksets, resources and resourcesets. These abstractions, combined with the expressiveness of ruby allows for concise yet powerful experiment descriptions.</p>

<h2 id='decoupled_client_and_server_execution'>Decoupled client and server execution</h2>

<p>Expo is built from two distinct parts: a client and a server. The client is responsible for translating the Expo script into commands the server will execute. This dichotomy can help save a lot of time. Indeed, an experiment script containing an error might abort the client, but the commands already launched on the server, and the results gathered are not lost.</p>

<h2 id='native_logging_and_archiving_capabilities'>Native logging and archiving capabilities</h2>

<p>In order to maximise the reproducibility and the analysis of experiments the Expo server comes with native logging capabilities. Standard outputs, inputs and errors are logged into memory. Those data can then be archived on disk, for longer keeping or in order to free memory. Start date, end date, status of each commands are also logged.</p>

<h2 id='interface_with_resource_brokers'>Interface with resource brokers</h2>

<p>Expo was built in the context of Grid&#8217;5000. It thus natively supports OAR and OAR2, the batch schedulers of G5K. This interface is done through a driver system. Adapting to a new batch scheduler only consist in developing the appropriate driver.</p>

      <h2>site info</h2>
      <p>&copy; 2005-2009 Brice Videau | Generated by <a href="http://webgen.rubyforge.org">webgen</a> | Design by <a href="http://andreasviklund.com">Andreas Viklund</a>.</p>
    </div>
  </body>
</html>
